version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=agridefender
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENV=development
      - DEBUG=True
    depends_on:
      - postgres
      - redis
    networks:
      - agridefender-network
    restart: on-failure

  processing:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m src.processing.worker
    volumes:
      - .:/app
      - ./data:/app/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=agridefender
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENV=development
      - MODEL_PATH=/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - agridefender-network
    restart: on-failure

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m src.dashboard.app
    volumes:
      - .:/app
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://api:8000
      - ENV=development
    depends_on:
      - api
    networks:
      - agridefender-network
    restart: on-failure

  postgres:
    image: postgis/postgis:14-3.2
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=agridefender
    networks:
      - agridefender-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agridefender-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  agridefender-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

